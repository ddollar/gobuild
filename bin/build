#!/bin/bash

# fail fast
set -o errexit
set -o pipefail

# args
PROJECT="$1"

# determine root
root=$(cd $(dirname $0)/..; pwd)

# if there's no vendored go, download an appropriate one
if [[ ! -d $root/vendor/go ]]; then
  echo "Downloading go for $GOOS/$GOARCH"
  goroot=$(mktemp -t goroot_XXXXX)
  rm -rf $goroot
  mkdir -p $goroot
  cd $goroot
  curl -s http://${COMPILER_BUCKET}.s3.amazonaws.com/go-${GOVERSION}-${GOOS}-${GOARCH}.tgz | tar -xzf -
  export GOROOT="$goroot/go"
else
  echo "Using vendored go"
  export GOROOT="$root/vendor/go"
fi

# make a tempdir to build in
echo "Creating GOPATH"
gopath=$(mktemp -t gopath_XXXXX)
rm -rf $gopath
mkdir -p $gopath

# some vars for go
export GOPATH="$gopath"
export PATH="$GOPATH/bin:$GOROOT/bin:/app/vendor/bin:$PATH"

# set up godeps
if [ -f Godeps ]; then
  go get github.com/kr/godep
  alias go="$GOPATH/bin/godep go"
fi

if [[ "$KEY" != "" && "$SPAWN_ENV" != "local" ]]; then

  echo "Downloading key"
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  curl -s $KEY -o ~/.ssh/id_rsa
  chmod 400 ~/.ssh/id_rsa

  echo "Disabling StrictHostKeyChecking"
  echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  echo "Downloading $PROJECT"
  mkdir -p $GOPATH/src/$PROJECT
  cd $GOPATH/src/$PROJECT
  git clone git@${PROJECT/\//:}.git .

else

  echo "Downloading $PROJECT"
  go get -d $PROJECT >/tmp/build.log

fi

# clone the specified ref
cd $GOPATH/src/$PROJECT
if [[ ! -z $REF ]]; then
  git fetch origin
  git checkout $REF
fi

echo "Compiling"
make VERSION=$VERSION

if [ -d $GOPATH/bin/${GOOS}_${GOARCH} ]; then
  BINARY="$(ls -1 $GOPATH/bin/${GOOS}_${GOARCH}/$(echo $PROJECT | cut -d/ -f3)*)"
else
  BINARY="$GOPATH/bin/$(echo $PROJECT | cut -d/ -f3)"
fi

echo "Recording size"
SIZE=$(wc -c <$BINARY | tr -d ' ')
curl -s -X POST $BUILD_HOST/build/$BUILD_ID/size -d size=$SIZE >/dev/null

echo "Uploading binary"
curl -s -X POST $BUILD_HOST/build/$BUILD_ID/binary -T $BINARY
